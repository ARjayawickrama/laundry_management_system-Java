/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2024-04-21 16:25:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;

public final class FeedView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.ResultSet");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Feedback View</title>\r\n");
      out.write("<style>\r\n");
      out.write("      body {\r\n");
      out.write("      background: url('images/f1.jpg') no-repeat center center fixed;\r\n");
      out.write("             background-size: 100%; \r\n");
      out.write("        margin-top: 200px;\r\n");
      out.write("    }\r\n");
      out.write("    table {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        margin-top: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    th, td {\r\n");
      out.write("        border: 1px solid black;\r\n");
      out.write("        padding: 8px;\r\n");
      out.write("        text-align: left;\r\n");
      out.write("        background-color: #f6f6f6;\r\n");
      out.write("        border-bottom: 1px solid #ddd;\r\n");
      out.write("    }\r\n");
      out.write("    th {\r\n");
      out.write("        background-color: #f2f2f2;\r\n");
      out.write("    }\r\n");
      out.write("    .buttona {\r\n");
      out.write("        background-color: #4CAF50;\r\n");
      out.write("        border: none;\r\n");
      out.write("        color: white;\r\n");
      out.write("        padding: 8px 16px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        display: inline-block;\r\n");
      out.write("        margin: 4px 2px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        border-radius: 3px;\r\n");
      out.write("    }\r\n");
      out.write("    .buttona:hover {\r\n");
      out.write("        background-color: #45a049;\r\n");
      out.write("    }\r\n");
      out.write("    .buttona:focus {\r\n");
      out.write("        outline: none;\r\n");
      out.write("    }\r\n");
      out.write("    .buttona:active {\r\n");
      out.write("        background-color: #36723a;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("    <table>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>ID</th>\r\n");
      out.write("            <th>Name</th>\r\n");
      out.write("            <th>Phone</th>\r\n");
      out.write("            <th>Email</th>\r\n");
      out.write("            <th>Message</th>\r\n");
      out.write("            <th>Edit</th>\r\n");
      out.write("            <th>Delete</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
 
        ResultSet rs3 = (ResultSet) request.getAttribute("resultSet");
        if (rs3 != null) {
            while (rs3.next()) {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>");
      out.print( rs3.getString("id") );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( rs3.getString("name") );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( rs3.getString("phone") );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( rs3.getString("email") );
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print( rs3.getString("massage") );
      out.write("</td>\r\n");
      out.write("            <td>\r\n");
      out.write("                <a class=\"buttona\" href=\"update_feedback.jsp?id=");
      out.print( rs3.getString("id") );
      out.write("&name=");
      out.print( rs3.getString("name") );
      out.write("&phone=");
      out.print( rs3.getString("phone") );
      out.write("&email=");
      out.print( rs3.getString("email") );
      out.write("&message=");
      out.print( rs3.getString("massage") );
      out.write("\">Edit</a>\r\n");
      out.write("            </td>\r\n");
      out.write("            <td>\r\n");
      out.write("                <form action=\"delete\" method=\"get\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"id\" value=\"");
      out.print( rs3.getInt("id") );
      out.write("\">\r\n");
      out.write("                    <button class=\"buttona\" type=\"submit\">Delete</button>\r\n");
      out.write("                </form>\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
 
            }
        } else {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"7\">No records found</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
 
        }
        
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
